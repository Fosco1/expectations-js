import { ValidatorDescriptor, ValidatorFunction } from "./ExpectationsJS.js";
import { Validatable } from "./Validatable.js";
import { ValidatorResult } from "./ValidatorResult.js";
export default class Expectation implements Validatable {
    key: string;
    validatorDescriptors: Array<ValidatorDescriptor>;
    subExpectations: Array<Validatable>;
    reverse: Boolean;
    arrayMode: Boolean;
    debugMode: Boolean;
    required: Boolean;
    missingMessage: string;
    propertyType: string;
    constructor(key: string);
    logIfDebug(...args: any[]): void;
    private getType;
    private defaultIfEmpty;
    get not(): Expectation;
    debug(): Expectation;
    validate(data: any, res: ValidatorResult): void;
    private processFailure;
    toMatch(regex: RegExp): Expectation;
    toBeString(): Expectation;
    toBe(value: any): Expectation;
    toBeGreaterThan(value: number): Expectation;
    toBeLessThan(value: number): Expectation;
    toBeBetween(min: number, max: number): Expectation;
    toBeArray(): Expectation;
    toBeEmpty(): Expectation;
    toHaveProperties(properties: Array<string>): Expectation;
    toHaveProperty(property: string): Expectation;
    toHaveLength(length: number): Expectation;
    toHaveMinimumLength(length: number): Expectation;
    toHaveMaximumLength(length: number): Expectation;
    toHaveLengthBetween(minimum: number, maximum: number): Expectation;
    toCustom(fn: ValidatorFunction): Expectation;
    toBeObject(): Expectation;
    toBeNumeric(): this;
    toBeNumber(): this;
    toBeNumberBetween(min: number, max: number): this;
    toBeNumberGreaterThan(value: number): this;
    toBeNumberLessThan(value: number): this;
    toBeBoolean(): this;
    toBeEnum(values: Array<any>): this;
    notRequired(): Expectation;
    each(): Expectation;
    ifNot(errorMessage: string): Expectation;
    validatorsList(): string;
    explain(): this;
    toSatisfy(expectations: Array<Validatable>): this;
    ifMissing(message: string): this;
}
